package main

import (
	"log"
	"github.com/go-telegram-bot-api/telegram-bot-api"
)
//—Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
var token string = ""
//id —á–∞—Ç–∞ –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ç—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å
var chatId int64  = -0000000000
var startStr string = "–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ @channel_name \n\n–í—Å–µ –ø—Ä–æ—Å—Ç–æ:\n- –ü–∏—à–∏—Ç–µ /start\n- –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"–°–¥–∞–º\" –∏–ª–∏ \"–°–Ω–∏–º—É\"\n- –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å, —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å."
var helpStr string = "/start –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å @channel_name_bot\n/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"

var mainMenu1 = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üè† –°–¥–∞–º"),
		tgbotapi.NewKeyboardButton("üö∂üèª‚Äç‚ôÇÔ∏è –°–Ω–∏–º—É"),
	),
)

var mainMenuBack = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ùé –ù–∞–∑–∞–¥"),
	),
)
var mainMenuBackAndSkip = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ùé –ù–∞–∑–∞–¥"),
		tgbotapi.NewKeyboardButton("üòé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
	),
)
var mainMenuComplete = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"),
	),
)
type probsummarySing struct {
	State int 
	Category string
	Text string
	Photo []string
}

var probsummarySingMap map[int]*probsummarySing

func init() {
	probsummarySingMap = make(map[int]*probsummarySing)
}

func main() {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	//log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if (update.Message == nil || update.Message.Chat.ID == chatId) {
			continue
		}

		//log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		if update.Message.IsCommand() {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, startStr)
			switch update.Message.Command() {				
			case "start":
				msg.ReplyMarkup = mainMenu1
			case "help":
				msg.Text = helpStr
			default:
				msg.Text = startStr
			}
			bot.Send(msg)
		}

		if (update.Message.Text == mainMenu1.Keyboard[0][0].Text || update.Message.Text == mainMenu1.Keyboard[0][1].Text) {

			probsummarySingMap[update.Message.From.ID] = new(probsummarySing)
			probsummarySingMap[update.Message.From.ID].State = 0
			
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
			if update.Message.Text == mainMenu1.Keyboard[0][0].Text {
				probsummarySingMap[update.Message.From.ID].Category = "#—Å–¥–∞–º"
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å, —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å."
			}
			if update.Message.Text == mainMenu1.Keyboard[0][1].Text {
				probsummarySingMap[update.Message.From.ID].Category = "#—Å–Ω–∏–º—É"
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."
			}
			msg.ReplyMarkup = mainMenuBack;
			bot.Send(msg)
			
		} else {
			cs, ok := probsummarySingMap[update.Message.From.ID]
			if (ok && (update.Message.Text != mainMenuBack.Keyboard[0][0].Text)) {
				if cs.State == 0 {
					cs.Text = update.Message.Text
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
					if cs.Category == "#—Å–¥–∞–º"{
						msg.Text = "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã."
					}
					if cs.Category == "#—Å–Ω–∏–º—É"{
						msg.Text = "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\""
					}
					msg.ReplyMarkup = mainMenuBackAndSkip
					bot.Send(msg)
					cs.State = 1
				} else if cs.State >= 1 {
					if update.Message.Photo!=nil {
						photo :=*update.Message.Photo
						cs.Photo = append(cs.Photo, photo[1].FileID)

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
						msg.ReplyMarkup = mainMenuComplete;
						bot.Send(msg)

						cs.State = cs.State + 1
					} else if (update.Message.Text == mainMenuComplete.Keyboard[0][0].Text || update.Message.Text == mainMenuBackAndSkip.Keyboard[0][1].Text){
						bot.Send(tgbotapi.NewMessage(chatId, cs.Category+"\n"+cs.Text+"\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @"+update.Message.From.UserName+" —á–µ—Ä–µ–∑ @"+bot.Self.UserName))
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
						msg.Text = "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ @channel_name\n\n–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"+cs.Text
						msg.ReplyMarkup = mainMenu1		
						bot.Send(msg)				
						for i := 0; i < len(cs.Photo); i++ {
							bot.Send(tgbotapi.NewPhotoShare(chatId, cs.Photo[i]))
							bot.Send(tgbotapi.NewPhotoShare(update.Message.Chat.ID, cs.Photo[i]))
						}	
						
						delete(probsummarySingMap, update.Message.From.ID)
					}
				}
			}
		}

		if update.Message.Text == mainMenuBack.Keyboard[0][0].Text {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, startStr)
			msg.ReplyMarkup = mainMenu1;
			bot.Send(msg)
			delete(probsummarySingMap, update.Message.From.ID)
		}

	}
}